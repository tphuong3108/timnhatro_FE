import { useEffect, useState } from "react";
import AsyncStorage from "@react-native-async-storage/async-storage";
import apiClient from "@/services/apiClient";

export default function useEditRoomLogic(roomId: string) {
  const [roomData, setRoomData] = useState<any>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  // L·∫•y d·ªØ li·ªáu ph√≤ng theo ID
  const fetchRoomData = async () => {
    try {
      console.log("üì° G·ªçi API l·∫•y d·ªØ li·ªáu ph√≤ng:", roomId);
      const token = await AsyncStorage.getItem("token");

      if (!token) {
        console.log("‚ö†Ô∏è Kh√¥ng c√≥ token, kh√¥ng th·ªÉ fetch room.");
        setError("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i.");
        return;
      }

      const res = await apiClient.get(`/hosts/rooms/${roomId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      const data = res.data?.data || res.data;
      console.log("‚úÖ API tr·∫£ v·ªÅ:", data);

      if (!data) {
        console.log("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ph√≤ng tr·∫£ v·ªÅ t·ª´ API");
        setRoomData(null);
        return;
      }

      // üîß Chu·∫©n h√≥a d·ªØ li·ªáu ƒë·ªÉ tr√°nh l·ªói .map(undefined)
      const normalizedData = {
        ...data,
        images: Array.isArray(data.images) ? data.images : [],
        videos: Array.isArray(data.videos) ? data.videos : [],
        amenities: Array.isArray(data.amenities) ? data.amenities : [],
        coordinates:
          data.coordinates ||
          data.location?.coordinates || { latitude: 0, longitude: 0 },
      };

      console.log("üß© D·ªØ li·ªáu sau chu·∫©n h√≥a:", normalizedData);

      setRoomData(normalizedData);
      setError(null);
    } catch (err: any) {
      console.log("‚ùå L·ªói khi fetch room:", err?.response?.data || err);
      setError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ph√≤ng.");
    } finally {
      setLoading(false);
    }
  };

  // G·ªçi fetch khi roomId thay ƒë·ªïi
  useEffect(() => {
    if (roomId) {
      console.log("üöÄ useEffect ch·∫°y v·ªõi roomId:", roomId);
      fetchRoomData();
    } else {
      console.log("‚ö†Ô∏è roomId r·ªóng, kh√¥ng fetch.");
    }
  }, [roomId]);

  // H√†m c·∫≠p nh·∫≠t ph√≤ng
  const handleUpdateRoom = async (updatedData: any) => {
    try {
      console.log("üì§ G·ª≠i d·ªØ li·ªáu c·∫≠p nh·∫≠t:", updatedData);
      const token = await AsyncStorage.getItem("token");

      if (!token) throw new Error("Ch∆∞a ƒëƒÉng nh·∫≠p");

      const formData = new FormData();

      Object.entries(updatedData).forEach(([key, value]) => {
        if (Array.isArray(value)) {
          value.forEach((v, index) => {
            if (typeof v === "object" && v?.uri) {
              formData.append(`${key}[${index}]`, {
                uri: v.uri,
                type: v.type || "image/jpeg",
                name: v.fileName || `media_${index}.jpg`,
              } as any);
            } else {
              formData.append(`${key}[${index}]`, v);
            }
          });
        } else {
          formData.append(key, String(value));
        }
      });

      const res = await apiClient.patch(`/hosts/rooms/${roomId}`, formData, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "multipart/form-data",
        },
      });

      console.log("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng:", res.data);
      return { success: true, data: res.data };
    } catch (err: any) {
      console.log("‚ùå L·ªói khi c·∫≠p nh·∫≠t ph√≤ng:", err?.response?.data || err);
      return { success: false, error: err };
    }
  };

  return { roomData, setRoomData, loading, error, handleUpdateRoom };
}
