import React, { useState } from "react";
import { Ionicons } from "@expo/vector-icons";
import * as ImagePicker from "expo-image-picker";
import { useLocalSearchParams, useRouter } from "expo-router";
import {
  Alert,
  ScrollView,
  Text,
  TextInput,
  TouchableOpacity,
  View,
  ActivityIndicator,
} from "react-native";
import MediaPicker from "./add/MediaPicker";
import { roomApi } from "@/services/roomApi";

export default function ReportRoom() {
  const router = useRouter();
  const { id } = useLocalSearchParams<{ id: string }>();
  const [reportText, setReportText] = useState("");
  const [media, setMedia] = useState<string[]>([]);
  const [loading, setLoading] = useState(false);

  const pickMedia = async () => {
    const permission = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (!permission.granted) {
      Alert.alert("Th√¥ng b√°o", "B·∫°n c·∫ßn c·∫•p quy·ªÅn truy c·∫≠p ·∫£nh/video.");
      return;
    }

    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsMultipleSelection: true,
      quality: 0.8,
    });

    if (!result.canceled) {
      const uris = result.assets.map((a) => a.uri);
      setMedia((prev) => [...prev, ...uris]);
    }
  };

  // üóëÔ∏è X√≥a media
  const removeMedia = (uri: string) => {
    setMedia((prev) => prev.filter((item) => item !== uri));
  };

  // üöÄ G·ª≠i b√°o c√°o
  const handleSend = async () => {
    if (!reportText.trim()) {
      Alert.alert("Th√¥ng b√°o", "Vui l√≤ng nh·∫≠p n·ªôi dung b√°o c√°o.");
      return;
    }

    try {
      setLoading(true);
      await roomApi.reportRoom(id, reportText.trim());
      Alert.alert("üéâ Th√†nh c√¥ng", "B√°o c√°o c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i!", [
        {
          text: "OK",
          onPress: () => router.push("/(tabs)/home"),
        },
      ]);
      setReportText("");
      setMedia([]);
    } catch (err: any) {
      console.log("‚ùå L·ªói g·ª≠i b√°o c√°o:", err.response?.data || err.message);
      Alert.alert(
        "L·ªói",
        err.response?.data?.message ||
          "Kh√¥ng th·ªÉ g·ª≠i b√°o c√°o, vui l√≤ng th·ª≠ l·∫°i."
      );
    } finally {
      setLoading(false);
    }
  };

  return (
    <ScrollView className="flex-1 bg-white px-5 py-6">
      <Text className="text-2xl font-bold mb-2 text-[#3F72AF] text-center py-5">
        B√°o c√°o ph√≤ng
      </Text>

      <Text className="text-gray-600 mb-4 leading-5">
        N·∫øu b·∫°n ph√°t hi·ªán ph√≤ng c√≥ d·∫•u hi·ªáu l·ª´a ƒë·∫£o, sai th√¥ng tin ho·∫∑c h√†nh vi
        vi ph·∫°m ‚Äî h√£y m√¥ t·∫£ chi ti·∫øt b√™n d∆∞·ªõi v√† ƒë√≠nh k√®m h√¨nh ·∫£nh ho·∫∑c video
        minh ch·ª©ng (n·∫øu c√≥) ƒë·ªÉ gi√∫p ch√∫ng t√¥i x√°c minh nhanh h∆°n.
      </Text>

      {/* N·ªôi dung b√°o c√°o */}
      <TextInput
        placeholder="Nh·∫≠p n·ªôi dung b√°o c√°o..."
        multiline
        numberOfLines={6}
        value={reportText}
        onChangeText={setReportText}
        className="bg-gray-100 rounded-lg p-4 text-[14px] text-gray-700"
      />

      {/* ·∫¢nh / Video */}
      <View className="mb-7 mt-5">
        <View className="flex-row justify-between items-center mb-2">
          <Text className="text-sm text-gray-500">{media.length} m·ª•c</Text>
        </View>

        <MediaPicker
          media={media}
          pickMedia={pickMedia}
          removeMedia={removeMedia}
        />
      </View>

      {/* G·ª≠i b√°o c√°o */}
      <TouchableOpacity
        onPress={handleSend}
        disabled={loading}
        className={`mt-8 rounded-lg py-3 flex-row justify-center items-center ${
          loading ? "bg-gray-400" : "bg-[#f57575]"
        }`}
      >
        {loading ? (
          <ActivityIndicator color="#fff" />
        ) : (
          <>
            <Ionicons name="alert-circle-outline" size={20} color="#fff" />
            <Text className="ml-2 text-white font-semibold text-base">
              G·ª≠i b√°o c√°o
            </Text>
          </>
        )}
      </TouchableOpacity>
    </ScrollView>
  );
}
