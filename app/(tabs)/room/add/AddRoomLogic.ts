import apiClient from "@/services/apiClient";
import { profileApi } from "@/services/profileApi";
import AsyncStorage from "@react-native-async-storage/async-storage";
import * as ImagePicker from "expo-image-picker";
import * as Location from "expo-location";
import { useEffect, useState } from "react";
import Toast from "react-native-toast-message";
import * as FileSystem from "expo-file-system/legacy";
import { router } from "expo-router";
import { Alert } from "react-native";

export const useAddRoomLogic = () => {
  const [roomName, setRoomName] = useState("");
  const [price, setPrice] = useState("");
  const [location, setLocation] = useState("");
  const [marker, setMarker] = useState<{ latitude: number; longitude: number } | null>(null);
  const [description, setDescription] = useState("");
  const [selectedAmenities, setSelectedAmenities] = useState<string[]>([]);
  const [media, setMedia] = useState<string[]>([]);
  const [loadingLocation, setLoadingLocation] = useState(false);
  const [loadingSubmit, setLoadingSubmit] = useState(false);
  const [isHost, setIsHost] = useState(false);

  // üß≠ L·∫•y v·ªã tr√≠ hi·ªán t·∫°i
  const getCurrentLocation = async () => {
    try {
      setLoadingLocation(true);
      const { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== "granted") {
        Toast.show({ type: "error", text1: "C·∫ßn quy·ªÅn truy c·∫≠p v·ªã tr√≠!" });
        return;
      }

      const loc = await Location.getCurrentPositionAsync({});
      setMarker({
        latitude: loc.coords.latitude,
        longitude: loc.coords.longitude,
      });
      Toast.show({ type: "info", text1: "ƒê√£ ch·ªçn v·ªã tr√≠ hi·ªán t·∫°i!" });
    } catch (err) {
      console.log("‚ùå L·ªói l·∫•y v·ªã tr√≠:", err);
      Toast.show({ type: "error", text1: "Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ hi·ªán t·∫°i!" });
    } finally {
      setLoadingLocation(false);
    }
  };

  // üì∏ Ch·ªçn ·∫£nh ho·∫∑c video
  const pickMedia = async () => {
    try {
      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.All,
        allowsMultipleSelection: true,
        quality: 0.8,
      });

      if (!result.canceled) {
        const uris = result.assets.map((a) => a.uri);
        setMedia((prev) => [...prev, ...uris]);
        console.log("üñºÔ∏è Ch·ªçn media th√†nh c√¥ng:", uris);
      }
    } catch (err) {
      console.log("‚ùå L·ªói ch·ªçn media:", err);
      Toast.show({ type: "error", text1: "Kh√¥ng th·ªÉ ch·ªçn ·∫£nh ho·∫∑c video!" });
    }
  };

  const removeMedia = (uri: string) => {
    setMedia((prev) => prev.filter((m) => m !== uri));
  };

  // üó∫Ô∏è Ch·ªçn v·ªã tr√≠ th·ªß c√¥ng
  const handleMapPress = (e: any) => {
    const { latitude, longitude } = e.nativeEvent.coordinate;
    setMarker({ latitude, longitude });
  };

  // üîç L·∫•y wardId theo t√™n
  const fetchWardIdByName = async (wardName: string): Promise<string | null> => {
    try {
      const res = await apiClient.get(`/wards/name/${name}`)
      return res.data.data?._id || null;
    } catch {
      console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ward:", wardName);
      return null;
    }
  };

  // üß† T·ª± ƒë·ªông n√¢ng quy·ªÅn Host khi m·ªü m√†n
  useEffect(() => {
    const upgradeRole = async () => {
      try {
        const token = await AsyncStorage.getItem("token");
        if (!token) return;

        const profile = await profileApi.getMyProfile();
        if (profile.role === "tenant") {
          await profileApi.upgradeRole({ revert: false });
          Toast.show({ type: "info", text1: "ƒê√£ ƒë·ªïi quy·ªÅn sang Host" });
        }
        setIsHost(true);
      } catch (err) {
        console.log("‚ö†Ô∏è Kh√¥ng th·ªÉ n√¢ng role:", err);
      }
    };

    upgradeRole();

    return () => {
      if (isHost) {
        profileApi.upgradeRole({ revert: true }).then(() => {
          Toast.show({ type: "info", text1: "ƒê√£ tr·ªü l·∫°i quy·ªÅn Tenant" });
        });
      }
    };
  }, [isHost]);

  useEffect(() => {
    const updateAddressFromMarker = async () => {
      if (!marker) return;
      try {
        const [geo] = await Location.reverseGeocodeAsync({
          latitude: marker.latitude,
          longitude: marker.longitude,
        });
        if (geo) {
          const ward = geo.subregion || geo.district || "";
          const city = geo.city || geo.region || "";
          const street = geo.name || geo.street || "";
          const address = `${street} ${ward ? ward + ", " : ""}${city}`;
          setLocation(address);
          console.log("üìç ƒê·ªãa ch·ªâ t·ª± ƒë·ªông:", address);
        }
      } catch (error) {
        console.log("‚ùå L·ªói reverse geocoding:", error);
      }
    };
    updateAddressFromMarker();
  }, [marker]);



const handleSubmit = async () => {
  console.log("üöÄ handleSubmit ƒë∆∞·ª£c g·ªçi!");
  if (!roomName || !price || !location || !marker) {
    Toast.show({ type: "error", text1: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
    return;
  }

  try {
    setLoadingSubmit(true);
    const token = await AsyncStorage.getItem("token");
    if (!token) {
      Toast.show({ type: "error", text1: "Ch∆∞a ƒëƒÉng nh·∫≠p!" });
      return;
    }

    const uploadUrl = `${apiClient.defaults.baseURL}/hosts/rooms`;

    // üì∏ Chuy·ªÉn ·∫£nh sang base64
    const base64Images: string[] = [];
    for (const uri of media) {
      try {
        const base64 = await FileSystem.readAsStringAsync(uri, { encoding: "base64" });
        base64Images.push(`data:image/jpeg;base64,${base64}`);
      } catch (err) {
        console.log("‚ùå L·ªói ƒë·ªçc file:", err);
      }
    }

    const body = {
      name: roomName,
      address: location,
      price,
      description,
      ward: "68fece1de79afdce26641857",
      amenities: selectedAmenities,
      location: {
        type: "Point",
        coordinates: [marker.longitude, marker.latitude],
      },
      images: base64Images,
    };

    const res = await fetch(uploadUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify(body),
    });

    const data = await res.json();
    console.log("‚úÖ Ph·∫£n h·ªìi BE:", data);
      if (res.ok) {
      Alert.alert("üéâ Th√†nh c√¥ng", "Ph√≤ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i, vui l√≤ng ch·ªù admin duy·ªát.",
        [
          {
            text: "OK",
            onPress: () => {
              setRoomName("");
              setPrice("");
              setDescription("");
              setMedia([]);
              setSelectedAmenities([]);
              setMarker(null);
              setLocation("");
              router.push("/(tabs)/home");
            },
          },
        ]
      );
    }
  } catch (err: any) {
    console.log("‚ùå L·ªói ƒëƒÉng ph√≤ng:", err.message);
    Toast.show({
      type: "error",
      text1: "ƒêƒÉng ph√≤ng th·∫•t b·∫°i!",
      text2: err.message || "Vui l√≤ng th·ª≠ l·∫°i sau.",
    });
  } finally {
    setLoadingSubmit(false);
  }
};
  return {
    roomName,
    setRoomName,
    price,
    setPrice,
    location,
    setLocation,
    marker,
    setMarker,
    description,
    setDescription,
    selectedAmenities,
    setSelectedAmenities,
    media,
    pickMedia,
    removeMedia,
    loadingLocation,
    getCurrentLocation,
    loadingSubmit,
    handleSubmit,
    handleMapPress,
  };
};
