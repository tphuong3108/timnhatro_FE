import { Ionicons } from "@expo/vector-icons";
import { useLocalSearchParams, useRouter } from "expo-router";
import React, { useEffect, useState } from "react";
import {
  ActivityIndicator,
  Alert,
  SafeAreaView,
  ScrollView,
  Text,
  TouchableOpacity,
  View,
} from "react-native";
import Logo from "../../assets/images/logodoc.svg";
import InputField from "../../components/InputField";
import apiClient from "../../services/apiClient";

export default function ResetPasswordOtp() {
  const router = useRouter();
  const { email } = useLocalSearchParams();

  const [otp, setOtp] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [passwordVisible, setPasswordVisible] = useState(false);
  const [loading, setLoading] = useState(false);
  const [timer, setTimer] = useState(60);
  const [canResend, setCanResend] = useState(false);

  useEffect(() => {
    if (timer <= 0) {
      setCanResend(true);
      return;
    }
    const countdown = setTimeout(() => setTimer(timer - 1), 1000);
    return () => clearTimeout(countdown);
  }, [timer]);

  const handleResetPassword = async () => {
    if (!otp || !newPassword.trim()) {
      Alert.alert("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m√£ OTP v√† m·∫≠t kh·∫©u m·ªõi!");
      return;
    }

    try {
      setLoading(true);
      await apiClient.post("/users/reset-password", {
        email,
        otp,
        newPassword,
      });

      Alert.alert("üéâ Th√†nh c√¥ng", "M·∫≠t kh·∫©u c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i!", [
        { text: "ƒêƒÉng nh·∫≠p", onPress: () => router.replace("/auth/login") },
      ]);
    } catch (error: any) {
      console.log("Reset password error:", error.response?.data || error.message);
      Alert.alert(
        "L·ªói",
        error.response?.data?.message || "M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n."
      );
    } finally {
      setLoading(false);
    }
  };

  const handleResend = async () => {
    try {
      setCanResend(false);
      setTimer(60);
      await apiClient.post("/users/forgot-password", { email });
      Alert.alert("‚úÖ ƒê√£ g·ª≠i l·∫°i m√£ OTP", "Vui l√≤ng ki·ªÉm tra email.");
    } catch (error: any) {
      console.log("Resend OTP error:", error.response?.data || error.message);
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ g·ª≠i l·∫°i OTP. Th·ª≠ l·∫°i sau.");
    }
  };

  return (
    <SafeAreaView className="flex-1 bg-white">
      <ScrollView contentContainerStyle={{ flexGrow: 1 }}>
        <View className="flex-1 bg-white px-6 pt-12 pb-10">
          {/* Logo */}
          <View className="items-center mb-6">
            <Logo width={280} height={280} />
          </View>

          {/* Ti√™u ƒë·ªÅ */}
          <Text className="text-3xl font-bold text-center text-[#3F72AF] mb-2">
            ƒê·∫∂T L·∫†I M·∫¨T KH·∫®U
          </Text>
          <Text className="text-gray-500 text-center mb-8">
            M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi email{" "}
            <Text className="font-semibold text-[#3F72AF]">{email}</Text>
          </Text>

          {/* M√£ OTP */}
          <InputField
            label="M√£ OTP"
            value={otp}
            onChangeText={setOtp}
            keyboardType="numeric"
          />

          {/* M·∫≠t kh·∫©u m·ªõi */}
          <InputField
            label="M·∫≠t kh·∫©u m·ªõi"
            value={newPassword}
            onChangeText={setNewPassword}
            secureTextEntry={!passwordVisible}
            right={
              <TouchableOpacity onPress={() => setPasswordVisible(!passwordVisible)}>
                <Ionicons
                  name={passwordVisible ? "eye-outline" : "eye-off-outline"}
                  size={20}
                  color="gray"
                />
              </TouchableOpacity>
            }
          />

          {/* N√∫t x√°c nh·∫≠n */}
          <TouchableOpacity
            className="bg-[#3F72AF] py-3 rounded-full mb-6 mt-4"
            onPress={handleResetPassword}
            disabled={loading}
            activeOpacity={0.8}
          >
            {loading ? (
              <ActivityIndicator color="#fff" />
            ) : (
              <Text className="text-white text-center text-lg font-semibold">
                X√ÅC NH·∫¨N
              </Text>
            )}
          </TouchableOpacity>

          {/* G·ª≠i l·∫°i m√£ OTP */}
          <TouchableOpacity onPress={handleResend} disabled={!canResend}>
            <Text
              className={`text-center ${
                canResend ? "text-[#3F72AF]" : "text-gray-400"
              } font-medium`}
            >
              {canResend ? "G·ª≠i l·∫°i m√£ OTP" : `G·ª≠i l·∫°i m√£ sau ${timer}s`}
            </Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}
